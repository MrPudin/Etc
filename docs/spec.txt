[Etc 2.0 specifications]
Etc - etcetera
Design document for Etc 2.0
System Configuration Deployment System 2.0
Automates the setting up a an (development) enviroment.

[Requirements]
Requirements;
1. Operating System Independence (at least Unix like OS okay).
2. Package manager independence. (apt-get, brew, pacman. I dont care)
3. Ease of configuration and setup - minimum duplicity.
4. Dependecy managment (at a higher level than package manager to include 
    stuff not supported by package managers)(eg. vim-plug, which is installed 
    from git is dependent on neovim, which is installed on from the package 
    manager)
5. Modular Configuaration possible. (neovim configuration can be independent of 
    tmux configuration... all the neovim plugin configuration can be grouped 
    together
6. install, remove, update hooks

Optional Requirements:
1, Concurrency to speed things up where possible (eg. downloading stuff, 
    building software ...)
2. Detects the software installed in the system and uses the fastest one where
    possible. (ie. aria2c instead of curl)
3. Easy to add support for other package managers.

[Project]
Project Organisation
src/ - source code
src/etc.m4 - m4 macros for use to create deployments. See: docs/macro.txt
docs/ - documentation for the project.
makefile - makefile for building the project
    Targets: 
        all - make everything
        install - install etc.
        docs - make docs
        clean - remove make generated files

[Design]
Deployment
make + m4 + git system 
- make provides dependecy system, target system.
- m4 provides make with useful macros, which speed up setup & configuration
- git provides upstream update support, as well as updating upstream support.

File "etc.m4"
- Defines the etc macros for use to defining the deployment
- see "docs/macro.txt" for documentation

File "makefile" 
- Bootstrap makefile
- Bootstraps actual deployment process
    - finds *.etc files.
    - expands m4 macros for these files
- Include *.etc files for running their deployment 

File "*.etc"
- Defines deployment through etc macros or makefile rules.
- Defines modules of deployment - module is a user defined singular entity that
    defines a particular setup for example the neovim module may contain
    commands to install neovim, install the configuration Example:
ETC_MODULE_BEGIN(neovim)

ETC_PKG(neovim)
ETC_PKG(neovim,pip3)

ETC_RESOURCE(https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim,~/.local/share/nvim/site/autoload/plug.vim)

ETC_HOOK_EVOLVE(`nvim +PlugUpdate +qa')
ETC_HIERARCHY(init.vim, ~/.config/nvim/init.vim)

ETC_MODULE_END(neovim)
- Defines dependencies between modules

~/.etc - main etcetera directory.
~/.etc/.etc_work - etcetera working directory
~/.etc/.etc_work/mark - etcetera working markers
~/.etc/.etc_work/source - etcetera geneerated makefiles.

Command Line Interface - CLI
Usage: etcetera [-hfld] (install|update|remove) [modules]
install - install deployment
update - update deployment
remove - remove deployment
-h - Print usage infomation
-f - Force action, regardless if already installed or updated
[modules] - Interact with these modules only

[TODO]
- self contained install system, no need for extra makefile
- Parallel installations with make -j and file-locks for sycronisation
- define package manager commands in a distinct, user configurable file
